#!/bin/bash
# Downloads and decompresses a conda artifact for a specific PR from GitHub Artifacts.
# Finds and uses the latest commit on the PR.
#
# Positional Arguments:
#   1) repo name
#   2) PR number
#   3) "cpp" or "python", to get the conda artifact for the C++ or Python build, respectively
#   4) [optional] commit hash, to get the conda artifact for a specific commit
#
# Optional Environment Variables:
#   RAPIDS_UNZIP_DIR: directory to unzip the conda artifact into
#
# Example Usage:
#   rapids-get-pr-conda-artifact-github rmm 1095 cpp
set -euo pipefail
export RAPIDS_SCRIPT_NAME="rapids-get-pr-conda-artifact-github"

repo="${1}"
pr="${2}"
package_type="${3}"
commit="${4:-}"

# If commit is not provided, get the latest commit on the PR
if [[ -z "${commit}" ]]; then
    commit=$(git ls-remote https://github.com/rapidsai/"${repo}".git refs/heads/pull-request/"${pr}" | cut -f1)
fi

# Use a subshell to isolate environment variable changes
(
    # Set up environment variables needed for GitHub artifact download
    RAPIDS_REPOSITORY="rapidsai/${repo}"
    RAPIDS_SHA="${commit}"
    RAPIDS_REF_NAME="pull-request/${pr}"

    # Generate the artifact name
    pkg_name="$(RAPIDS_NO_PKG_EXTENSION=true rapids-package-name "conda_${package_type}")"
    github_run_id=$(gh run list --repo "${RAPIDS_REPOSITORY}" --branch "${RAPIDS_REF_NAME}" --commit "${RAPIDS_SHA}" --json databaseId --jq '.[0] | .databaseId')
    unzip_dest="${RAPIDS_UNZIP_DIR:-$(mktemp -d)}"

    rapids-echo-stderr "Downloading and decompressing ${pkg_name} from Run ID ${github_run_id} into ${unzip_dest}"
    rapids-retry gh run download "${github_run_id}" --repo "${RAPIDS_REPOSITORY}" --name "${pkg_name}" --dir "${unzip_dest}"

    echo -n "${unzip_dest}"
)
